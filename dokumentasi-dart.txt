printer di dart: print(object);
variable di dart = var nama = ....
jika mengambil variable bisa menggunakan $ dan dibungkus kurawal contoh:
print("Hello ${namavar}")

var bisa digunakan di segala tipe data
selain var ada String, int
nullable variable: tipedata? namavariable;
operasi di String:

namaVar.contains() = mengandung string tertentu atau char tertenti
namaVar.toLowerCase()
namaVar.toUpperCase

namaVar.toString() untuk mengubaha int ke string 
namaVar.split(pattern); mengubah string menjadi list
namaVar.substring(startindex, endIndex) dia akan memunculkan string setelah index ke tersebut
namaVar.length untuk menampilan panjang char di string
namaVar.trim() untuk menghilangkan spasi di bagian awal setelah ' dan dibagian akhir sebelum '
namaVar.codeUnitAt(index) untuk mengubah char menjadi nilai desimal ASCII
namaVar.indexOf('')  untuk menampilkan index dari character, jika ada lebih dari 1 maka yang ditampilkan yang pertama
namaVar.startsWith() untuk mengecek apakah string diawali dengan kata tersebut
namaVar.endWith() ------------=------------------ diakhiri ....
namaVar.isEmpty untuk mengecek apakah string pada variable kosong
namaVar.isNotempty untuk mengecek apakah ada isinya 
.runtimeType untuk mengecek tipe data
.floor() membulatkan kebawah
.ceil() membulatkan ke atas
.round() sesuai dengan aturan pembulatan
.toStringAsFixed(jumlah) untuk menampilkan berapa digit dibelakang koma
.toStringPrecision(jumlah) untuk menampilkan berapa digit pertama secara keseluruhan
tipe data number:
num, int, double


LIST
berfungsi untuk menyimpan sekumpulan object atau data seperti array namun bisa memiliki nilai berbeda
List<typedata> maka dia hanya akan memiliki tipe data sesuai dengan yaang ada di <>
List namaList maka dia bersifat dynamic
list opeation:

namaList.add() ==> digunakan untuk menambahkan nilai list / isi list 
namaList.addAll() ==> digunakan untuk menambahkan nilai list dari list lain (nilai list lain akan masuk semua)
namaList.sort() ==> digunakan untuk mengurutkan nilai list dari alphabet a-z
namalist.clear() ==> digunakan untuk membersihkan semua isi list
namaList.reversed ==>


MAP 
berisi seperti object {'key': 'Value'}
untuk menampilkan value dari key pertama maka cara memanggilnya adalah: print(namaMap[key])

operasi pada map: 
namaMap.keys = menampilkan keys
namaMap.values = menampilkan value
namaMap.containsKey('namaKey') = untuk mengecek apakah map memiliki key yang dipilih
namaMap.containsValue('namaValue') = untuk mengecek apakah map memiliki value tertentu
namaMap.length = untuk menampilkan panjang map
namaMap.remove('key') = untuk menghapus key dan value nya
untuk mengubah tinggal mengganti biasa



Operator Pada dart
int a = 5;
int b = 10;
int sum = a + b;
int min = a - b;
int times = a*b ;
double div =  a / b  ;
int modulo = a % b; 

print(sum);
print(min);
print(times);
print(div);
print(modulo);


  // equality operator
print(a > b);
print(a<b);
print(a = b);
print(a != b);
print(a >=b);
print(a<=b);

  // Logical Operator
  if else, switch sama seperti java
  method sama seperti java tetapi tidak memakai public static
  langsung void / int / string


OOP Dart

Class & Object sama aja seperti java, hanya saja di awal variable dart
supaya bisa bisa nullable maka diberi properties late

contructor function
sama juga seperti java
hanya saja jika parameter tidak wajib diisi maka harus dibungkus dengan {}

get & set 
  void setPemilik (String namaPemilik){
    this.namaPemilik = namaPemilik;
  }
  String get getPemilik {
    return namaPemilik;
  }


Inheritance
sama seperti java, juga menggunakan keyword extends 

interface sama dengan java hanya saja tidak menggunakan interface di superclass
langsung menggunakan implements di subclass. pada interface juga bisa menggunakan
lebih dari 1 superclass (multiple class)

abstract class tidak bisa dipanggil, abstrack class hanya bisa dijalankan
karena abstract class hanya sebagai kerangka

mixin
mixin yaitu sebuah class mewarisi sifat dari 2 class parent contoh:
mixin mamalia {
  void methodMamalia(){
    print("Method Mamalia");
  }
}

mixin berkakiEmpat {
  void methodBerkakiEmpat(){
    print("Method berkaki empat");
  }
}

class sapi with mamalia, berkakiEmpat {
  void methodSapi(){
    print("Method sapi");
  }
}

Arrowfunction

void namafungsi (type Parameter) => (
  expression
)
arrow function tidak memerlukan return

Synchronous 
-menampilkan output sesuai dengan urutan kode
misal kode: a, b, c
output: a, b, c

Asynchronous 
-menampilkan output tidak sesuai dengan urutan kode
misal kode: a, b, c, d
output: a,b,d,c
dia akan mengeluarkan output mana yang bisa dikeluarkan
terlebih dahulu
keyword async digunakan untuk memberitahu bahwa sebuah fungsi adalah Asynchronous
keyword await digunakan untuk menunggu proses data selsai baru dilakukan return
Await


try digunakan apabila code berhasil dieksekusi
catch akan dieksekusi ketika kode di dalam try terdapat error

static keyword (digunakan di instance variabel dan method) digunakan untuk membuat
variable statis dan method statis